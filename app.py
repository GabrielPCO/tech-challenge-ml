# Libs

import pandas as pd
import datetime as dt

# libs gr√°ficas
import matplotlib.pyplot as plt

# Streamlit
import streamlit as st

# Configurando a p√°gina
st.set_page_config(
    page_title="Tech-Challenge",
    page_icon="üìà",
    layout="centered",
    initial_sidebar_state="auto",
    menu_items={
        'About': "Projeto criado para o *tech-challenge* do curso de p√≥s-gradua√ß√£o da FIAP/Alura."
    }
)

# Fun√ß√£o para a leitura da base de dados
@st.cache_data
def read_csv_file(file):
    return pd.read_csv(file)

df_ibovespa = read_csv_file('Assets/DataFrames/ibov.csv')

# Titulo de P√°gina
st.title('An√°lise de dados: explorando dados do hist√≥rico de fechamento do √≠ndice Ibovespa (BVSP)')

# C√≥digo para alinhar imagens expandidas no centro da tela e justificar textos
st.markdown(
    """
    <style>
        body {text-align: justify}
        button[title^=Exit]+div [data-testid=stImage]{
            text-align: center;
            display: block;
            margin-left: auto;
            margin-right: auto;
            width: 100%;
        }
    </style>
    """, unsafe_allow_html=True
)

# Carregamento de imagens por cach
@st.cache_data
def load_img(img):
    return plt.imread(img)

# Layout do aplicativo
tab0, tab1, tab2, tab3, tab4, tab5 = st.tabs(["üî∑Introdu√ß√£o",
                                              "üåêBase de Dados",
                                              "üîçAn√°lise Explorat√≥ria dos Dados",
                                              "üìãARIMA",
                                              "üìàXGB", 
                                              "üìëRefer√™ncias"])

# Separando as Tabs
with tab0:
    '''
    ## Explorando dados do hist√≥rico de fechamento do √≠ndice Ibovespa

    Links importantes:

    [b3.com.br](https://www.b3.com.br/pt_br/market-data-e-indices/indices/indices-amplos/ibovespa.htm) - Dados de fechamento do √≠ndice Bovespa

    [investing.com](https://br.investing.com/indices/bovespa-historical-data) - Base de dados Ibovespa

    Links dos integrantes do projeto:

    [github.com/GabrielPCO](https://github.com/GabrielPCO/tech-challenge-ml) - Github Gabriel Oliveira

    [github.com/jackson-simionato](https://github.com/jackson-simionato) - Github Jackson Simionato

    gabrielpcoliveira@gmail.com - Email Gabriel Oliveira

    simionato.jackson@gmail.com - Email Jackson Simionato

    haendelf@hotmail.com - Email Haendel Oliveira

    '''
    st.divider()
    '''
    
    ## Resumo

    O Ibovespa √© o principal indicador de desempenho das a√ß√µes negociadas na B3 e re√∫ne as empresas mais importantes do mercado de capitais brasileiro. 
    
    Ele foi criado em 1968 e, ao longo desses 50 anos, consolidou-se como refer√™ncia para investidores ao redor do mundo.

    Reavaliado a cada quatro meses, o √≠ndice √© resultado de uma carteira te√≥rica de ativos. 
    
    Composto pelas a√ß√µes e units de companhias listadas na B3 que atendem aos crit√©rios descritos na sua metodologia, correspondendo a cerca de 80% do n√∫mero de neg√≥cios e do volume financeiro do nosso mercado de capitais.
    
    Neste documento iremos analizar dados hist√≥ricos do fechamento do √≠ndice Ibovespa e criar um modelo preditivo com precis√£o adequada (acima de 70%) com intuito de evidenciar padr√µes e tend√™ncias futuras.

    Os t√≥picos foram divididos em quatro categorias principais: base de dados, an√°lise explorat√≥ria dos dados, ARIMA, XGB. Cada categoria ser√° tratada e mais aprofundada em sua respectiva aba dentro desse documento.

    
    A seguir, disponibilizamos os dados utilizados para a an√°lise no momento da publica√ß√£o deste documento.

    '''
    st.divider()
    '''

    #### DataFrame dos dados do hist√≥rico de fechamento do Ibovespa entre os anos de 2003 a 2023
    '''

    # Fun√ß√£o do bot√£o de Download para converter o DataFrame em .csv
    @st.cache_data
    def convert_df(df):
        return df.to_csv().encode('utf-8')

    # Convertendo o DataFrame em .csv
    csv = convert_df(df_ibovespa)

    # Adicionando o DataFrame
    @st.cache_data
    def create_df(df):
        return pd.DataFrame(df)
    
    dataframe = create_df(df_ibovespa)
    dataframe = dataframe.set_index(['Data'])
    st.dataframe(dataframe, use_container_width=True)

    # Bot√£o de Download do DataFrame
    st.download_button(
        label="Download do CSV",
        data=csv,
        file_name='df_ibovespa.csv',
        mime='text/csv',
    )

    st.divider()
    '''

    ## Observa√ß√£o

    Os demais dados, DataFrames e outras an√°lises mais aprofundadas podem ser encontradas na p√°gina de Github dos integrantes do grupo referenciadas no in√≠cio desse documento.
    '''

with tab1:
    '''

    ## Coleta e Manipula√ß√£o dos dados

    Inicialmente, realizamos o carregamento dos dados utilizados na an√°lise.

    Esses dados contem o hist√≥rico de fechamento do √≠ndice Ibovespa durante o per√≠odo de 15/10/2003 a 15/08/2023.

    Os dados foram obtidos do site da investing.com que √© uma plataforma e site de not√≠cias sobre o mercado financeiro.
    ```python
    # Carregando o DataFrame com os dados da base
    df_ibovespa = pd.read_csv('Assets/Base/ibovespa.csv', sep=',')
    ```

    '''
    st.divider()
    '''

    ## Dados Nulos

    Foi ent√£o verificado a presen√ßa de dados nulos que poderiam comprometer nossa an√°lise
    ```python
    # Verificando valores nulos no DataFrame
    df_ibovespa.isnull().sum()
    ```
    Encontramos um dado nulo na coluna 'Volume' em nossos dados
    ```
    Data        0
    √öltimo      0
    Abertura    0
    M√°xima      0
    M√≠nima      0
    Vol.        1
    Var%        0
    dtype: int64
    ```
    ```python
    # Encontrando o dado nulo na linha correspondente
    df_ibovespa[df_ibovespa['Vol.'].isna()]
    ```
    ```
    |       Data | √öltimo | Abertura | M√°xima | M√≠nima | Vol. |   Var% |
    | 10.02.2016 | 40.377 |   40.592 | 40.592 |  39.96 |  NaN | -0,53% |
    ```
    Decidimos ent√£o remover a linha, pois o valor nulo contido na coluna "Vol." impedir√° a constru√ß√£o adequada do nosso modelo de previs√£o.
    ```python
    # Removendo a linha com valor nulo
    df_ibovespa = df_ibovespa.drop(df_ibovespa[df_ibovespa['Vol.'].isna()].index)
    ```
    Removemos tamb√©m a coluna "Var%", pois essa coluna n√£o ser√° interessante para nosso modelo de previs√µes.
    ```python
    # Removendo coluna Var%
    del df_ibovespa['Var%']
    ```
    '''
    st.divider()
    '''

    ## Dados Duplicados

    Foi feita a verifica√ß√£o de valores duplicados nos dados
    ```python
    # Verificando dados duplicados
    df_ibovespa.duplicated().sum()
    ```
    ```
    0
    ```
    Nenhum dado duplicado foi encontrado, o que significa que nossos dados est√£o √≠ntegros.
    '''
    st.divider()
    '''

    ## Informa√ß√µes dos Dados

    Verificamos o shape
    ```python
    # Verificando o shape do DataFrame
    df_ibovespa.shape
    ```
    ```
    (4911, 6)
    ```
    E as principais informa√ß√µes dos nossos dados
    ```python
    # Verificando informa√ß√µes do Dataframe
    df_ibovespa.info()
    ```
    ```
    <class 'pandas.core.frame.DataFrame'>
    Index: 4911 entries, 0 to 4911
    Data columns (total 6 columns):
    #   Column    Non-Null Count  Dtype  
    ---  ------    --------------  -----  
    0   Data      4911 non-null   object 
    1   √öltimo    4911 non-null   float64
    2   Abertura  4911 non-null   float64
    3   M√°xima    4911 non-null   float64
    4   M√≠nima    4911 non-null   float64
    5   Vol.      4911 non-null   object 
    dtypes: float64(4), object(2)
    memory usage: 268.6+ KB
    ```
    '''
    st.divider()
    '''

    ## Convers√£o Datetime

    Observamos que o Dtype da coluna 'Data' est√° como 'object'.

    Como a coluna 'Data' possui os dados do per√≠odo de funcionamento de mercado temos que transformar seu Dtype de 'object' para 'datetime'
    ```python
    # Convertendo coluna Data de object para datetime
    df_ibovespa['Data'] = pd.to_datetime(df_ibovespa['Data'],format='%d.%m.%Y')
    df_ibovespa.head()
    ```
    ```
    |       Data |  √öltimo | Abertura |  M√°xima |  M√≠nima |   Vol. |
    | 2023-08-15 | 116.552 |  116.809 | 117.697 | 116.238 | 11,79M |
    | 2023-08-14 | 116.810 |  118.067 | 118.082 | 116.530 | 11,20M |
    | 2023-08-11 | 118.065 |  118.350 | 119.054 | 117.415 | 11,87M |
    | 2023-08-10 | 118.350 |  118.412 | 119.438 | 118.113 | 12,69M |
    | 2023-08-09 | 118.409 |  119.090 | 119.090 | 117.901 | 11,25M |
    ```
    '''
    st.divider()
    '''

    ## Convers√£o Inteiros

    Observamos que o Dtype das colunas numericas est√£o como 'float64'.

    Como os dados representam pontos de merdado e devem ser um n√∫mero inteiro, temos que fazer a convers√£o.
    ```python
    # Transformando as colunas que est√£o como float para int
    df_ibovespa['√öltimo'] = df_ibovespa['√öltimo'] * 1000
    df_ibovespa['√öltimo'] = df_ibovespa['√öltimo'].astype(int)
    df_ibovespa['Abertura'] = df_ibovespa['Abertura'] * 1000
    df_ibovespa['Abertura'] = df_ibovespa['Abertura'].astype(int)
    df_ibovespa['M√°xima'] = df_ibovespa['M√°xima'] * 1000
    df_ibovespa['M√°xima'] = df_ibovespa['M√°xima'].astype(int)
    df_ibovespa['M√≠nima'] = df_ibovespa['M√≠nima'] * 1000
    df_ibovespa['M√≠nima'] = df_ibovespa['M√≠nima'].astype(int)
    df_ibovespa.head()
    ```
    ```
    |       Data | √öltimo | Abertura | M√°xima | M√≠nima |   Vol. |
    | 2023-08-15 | 116552 |   116809 | 117697 | 116238 | 11,79M |
    | 2023-08-14 | 116810 |   118067 | 118082 | 116530 | 11,20M |
    | 2023-08-11 | 118065 |   118350 | 119054 | 117415 | 11,87M |
    | 2023-08-10 | 118350 |   118412 | 119438 | 118113 | 12,69M |
    | 2023-08-09 | 118409 |   119090 | 119090 | 117901 | 11,25M |
    ```
    '''
    st.divider()
    '''

    ## Convers√£o dos Valores de Volume
    Observamos que o Dtype da coluna "Vol." est√£o como 'object'.

    Como os dados representam volumes em milh√µes (M) ou milhares (K) de reais, teremos que fazer a convers√£o dos dados.
    ```python
    # Transformando a coluna Vol. em num√©rica
    df_ibovespa["Vol."] = df_ibovespa["Vol."].replace({",":".","K":"*1e3", "M":"*1e6"}, regex=True).map(pd.eval).astype(int)
    df_ibovespa.head()
    ```
    ```
    |       Data | √öltimo | Abertura | M√°xima | M√≠nima |     Vol. |
    | 2023-08-15 | 116552 |   116809 | 117697 | 116238 | 11790000 |
    | 2023-08-14 | 116810 |   118067 | 118082 | 116530 | 11200000 |
    | 2023-08-11 | 118065 |   118350 | 119054 | 117415 | 11870000 |
    | 2023-08-10 | 118350 |   118412 | 119438 | 118113 | 12690000 |
    | 2023-08-09 | 118409 |   119090 | 119090 | 117901 | 11250000 |
    ```
    '''
    st.divider()
    '''

    ## Finaliza√ß√£o

    Por fim, indexamos nossos dados pela coluna 'Data' em ordem ascendente e salvamos as modifica√ß√µes do DataFrame para o uso em nosso projeto.
    ```python
    # indexando o DataFrame pela data
    df_ibovespa_indexData = df_ibovespa.set_index(['Data'])

    # Ajustando o DataFrame para os dados ficarem em ordem ascendente quanto a data
    df_ibovespa_indexData = df_ibovespa_indexData.sort_index()

    # Salvando o DataFrame
    df_ibovespa_indexData.to_csv('Assets/DataFrames/ibov_modelo.csv')
    ```
    Agora nossos dados est√£o prontos para a pr√≥xima etapa de an√°lise.

    Na an√°lise, poderemos visualizar melhor as tend√™ncias e padr√µes de nossos dados.
    '''
with tab2:
    '''

    ## An√°lise explorat√≥ria dos dados

    Inicialmente iremos visualizar o fechamento di√°rio do Ibovespa no per√≠odo entre 15/10/2003 a 15/08/2023
    '''
    graf_1 = load_img('Assets/Graficos/historico.jpg')
    st.image(graf_1)
    '''

    Analisando a s√©rie temporal do valor de fechamento di√°rio do IBOVESPA, de maneira geral ficam evidentes seis momentos distintos, marcados por alguns grandes eventos socioecon√¥micos:

    1. Tend√™ncia de aumento do √≠ndice entre 2004 e 2008
    2. Crise econ√¥mica de 2008, com recupera√ß√£o em meados de 2010
    3. Tend√™ncia de queda de 2010 a 2016
    4. Alta tend√™ncia de subida entre 2016 e 2020
    5. Queda abrupta com a pandemia em 2020
    6. Retomada da normalidade a partir do final de 2021, com s√©rie variando em momentos de queda e alta

    Tamb√©m podemos notar que a maioria dos dados se concentra na regi√£o entre os 40.000 a 80.000 pontos, por√©m precisamos de mais an√°lises gr√°ficas para poder confirmar essa nossa hip√≥tese.
    '''
    st.divider()
    '''

    ## Densidade

    Podemos ent√£o analisar a distribui√ß√£o do nosso dataset atrav√©s de um gr√°fico de densidade
    '''
    graf_2 = load_img('Assets/Graficos/densidade.jpg')
    st.image(graf_2)
    '''

    Como suspeitamos, o gr√°fico de densidade indica uma concentra√ß√£o maior em torno dos 50.000 pontos.

    Isso nos indica que dentro dos nossos dados, durante a maior parte do tempo, o √≠ndice flutuou pr√≥ximo desse valor.
    '''
    st.divider()
    '''
    
    ## Volume negociado

    Al√©m do valor de fechamento, analisar vari√°veis como o Volume negociado pode ser interessante para entendermos o contexto do mercado financeiro brasileiro.

    '''
    graf_volume = load_img('Assets/Graficos/volume1.png')
    st.image(graf_volume)
    '''
    O gr√°fico ilustra bem a evolu√ß√£o do mercado vari√°vel no Brasil. √â vis√≠vel que, at√© meados de 2019, o volume de negocia√ß√µes sofreu pouca altera√ß√£o com uma leve tend√™ncia de crescimento.

    Com a redu√ß√£o nas taxas de juros e Selic, e consequentemente a baixa nos investimentos de Renda Fixa, o mercado de Renda Vari√°vel teve um "boom" a partir do ano de 2020.

    https://www.cnnbrasil.com.br/economia/numero-de-investidores-na-bolsa-cresce-15-em-2022-apostando-na-diversificacao/
    '''

    '''
    ## Volume x Fechamento

    Possivelmente, os valores de fechamento do √≠ndice IBOVESPA e volume total negociado no mercado est√£o positivamente correlacionados,
    tendo em vista que com a√ß√µes mais valorizadas h√° mais chance de ocorrorem negocia√ß√µes de compra e venda de a√ß√µes.
    '''
    graf_vol_fechamento = load_img('Assets/Graficos/volume_fechamento.png')
    st.image(graf_vol_fechamento)
    '''
    Neste gr√°fico de dispers√£o √© poss√≠vel visualizar uma forte correla√ß√£o entre o valor do √≠ndice IBOVESPA e o volume negociado em bolsa. 
    Para estas duas vari√°veis, foi calculada uma correla√ß√£o de aproximadaente 0.70, um valor bastante alto e que confirma a hip√≥tese incial.
    '''
    st.divider()
    '''
    ## Diferen√ßa entre m√≠nimo e m√°ximo

    Uma maneira interessante de verificar comportamentos incomuns nesta s√©rie temporal √© identificar os dias com maior diferen√ßa entre os valores di√°rios m√≠nimos e m√°ximos
    '''
    graf_dif_min_max = load_img('Assets/Graficos/dif_min_max1.png')
    st.image(graf_dif_min_max)
    '''
    **N√∫mero de dias com diferen√ßa entre m√≠nimo e m√°ximo maior que 5 pontos:**

    ```
    |      |  N dias | 
    |  Ano |         | 
    | 2020 |    19   |
    | 2021 |    3    |
    | 2022 |    2    |
    | 2018 |    2    |
    ```    
    Este resultado refor√ßa o comportamento at√≠pico do IBOVESPA a partir de 2020, por conta do contexto da pandemia e aquecimento do mercado de renda vari√°vel. 
    
    Possivelmente, 2021 e 2022 aparecem em seguida no ranking tamb√©m por reflexo dos efeitos da crise causada pela pandemia.
    '''
    st.divider()
    '''
    ## Componentes da s√©rie temporal original

    Para entender mais a fundo comportamento da vari√°vel target (Fechamento) ao longo do tempo, √© uma op√ß√£o visualizar os diferentes componentes da s√©rie temporal

    '''
    graf_serie_componentes = load_img('Assets/Graficos/serie_temporal_componentes.png')
    st.image(graf_serie_componentes)
    '''
    N√£o foi poss√≠vel extrair insights muito valiosos com a decomposi√ß√£o da s√©rie temporal em seus componentes. A tend√™ncia representa a mesma curva da pr√≥pria s√©rie por√©m um pouco mais suavizada.

    A sazonalidade t√™m padr√£o ca√≥tico, indicando que n√£o √© sazonalidade aparente nos dados, o que faz bastante sentido se tratando do mercado de a√ß√µes.

    J√° o res√≠duo refor√ßa a ideia de 2020 ser um ano fora do padr√£o de comportamento da curva.
    '''
    st.divider()
    '''

    ## Transforma√ß√£o Logaritmica

    Para uma melhor visualiza√ß√£o dos nossos dados, iremos realizar a transforma√ß√£o logaritmica da nossa s√©rie temporal.
    ```python
    # Transforma√ß√£o logar√≠tmica da s√©rie temporal
    df_ibovespa_indexData_log = np.log(df_ibovespa_indexData['√öltimo'])
    ```

    '''
    graf_3 = load_img('Assets/Graficos/log.jpg')
    st.image(graf_3)
    st.divider()
    '''
    
    ## M√©dia m√≥vel & desvio padr√£o

    Em seguida, tra√ßamos as retas da m√©dia m√≥vel e do desvio padr√£o para entender melhor o comportamento da nossa s√©rie.
    A m√©dia m√≥vel √© um estimador calculado a partir de amostras sequenciais, podendo indicar tend√™ncias em um determinado per√≠odo.
    J√° o desvio padr√£o expressar√° o grau de dispers√£o do nosso conjunto de dados.
    '''
    graf_4 = load_img('Assets/Graficos/mm_std.jpg')
    st.image(graf_4)
    '''

    Pelo gr√°fico, observamos uma certa tend√™ncia de ascens√£o dos pontos de fechamento ao longo do hist√≥rico dos dados.

    A seguir, iniciaremos a constru√ß√£o dos nossos modelos.
    Utilizaremos dois m√©todos diferentes para uma melhor an√°lise do fechamento do Ibovespa, visto que √© um tipo de dado sens√≠vel, vol√°til e sem a presen√ßa de sazonalidade.
    Inicialmente, vamos fazer a an√°lise utilizando o algoritmo ARIMA retroalimentado. 
    Em seguida, realizaremos uma outra an√°lise aplicando o Extreme Gradient Boosting Regressor em nossos dados.
    '''
with tab3:
    '''

    ## ARIMA

    Em Constru√ß√£o...
    '''
with tab4:
    '''

    ## Modelo XGBRegressor

    Decidimos utilizar tamb√©m o m√©todo **Extreme Gradient Boosting Regressor** para o nosso modelo de previs√µes.

    Esse m√©todo em quest√£o comp√µe um conjunto de classes de algoritmos de aprendizado de m√°quina que podem ser usados para problemas de classifica√ß√£o ou modelagem preditiva de regress√£o.

    Os conjuntos s√£o constru√≠dos a partir de modelos de √°rvore de decis√£o. As √°rvores s√£o adicionadas uma de cada vez ao conjunto e ajustadas para corrigir os erros de previs√£o cometidos pelos modelos anteriores. Este √© um tipo de modelo de aprendizado de m√°quina conjunto conhecido como boosting.

    Os modelos s√£o ajustados usando qualquer fun√ß√£o de perda diferenci√°vel arbitr√°ria e algoritmo de otimiza√ß√£o de gradiente descendente. Isso d√° √† t√©cnica o nome de ‚Äúaumento de gradiente‚Äù (Gradient boosting), pois o gradiente de perda √© minimizado √† medida que o modelo se ajusta, como uma rede neural.

    Por esse motivo, o m√©todo se torna resistente ao "overfitting" (sobreajuste), ou seja, quando um modelo estat√≠stico se ajusta muito bem ao conjunto de dados anteriormente observado.

    Desse modo, julgamos o m√©todo como sendo de extrema utilidade para a previs√£o de dados sens√≠veis como os financeiros.
    '''
    st.divider()
    '''
    
    ## Separando treino e teste

    Agora vamos desenvolver um modelo de previs√£o e trein√°-lo. Para isso, vamos visualizar os dados dividindo-os em conjuntos de treinamento e teste.
    
    Por se tratar de dados sens√≠veis e de maior volatilidade, decidimos dividir treinamento e teste em aproximadamente 85% e 15% dos dados, respectivamente.
    ```python
    treino = df_ibovespa_indexData.iloc[:int(.85*len(df_ibovespa_indexData)), :]
    teste = df_ibovespa_indexData.iloc[int(.85*len(df_ibovespa_indexData)):, :]
    ```
    '''
    graf_5 = load_img('Assets/Graficos/treino_teste.jpg')
    st.image(graf_5)
    '''

    Inicialmente, selecionamos as caracter√≠sticas e o target para o nosso modelo
    ```python
    # Definindo as vari√°veis de caracter√≠sticas e target do modelo
    caracteristicas = ["Abertura","M√°xima","M√≠nima","Vol."]
    target = '√öltimo'
    ```

    Em seguida, criamos nosso modelo de regress√£o
    ```python
    # Criando e treinando o modelo
    modelo = xgb.XGBRegressor()
    modelo.fit(treino[caracteristicas], treino[target])
    ```
    ```

    |                                 XGBRegressor                                |
    |XGBRegressor(base_score=None, booster=None, callbacks=None,                  |
    |            colsample_bylevel=None, colsample_bynode=None,                   |
    |            colsample_bytree=None, early_stopping_rounds=None,               |
    |            enable_categorical=False, eval_metric=None, feature_types=None,  |
    |            gamma=None, gpu_id=None, grow_policy=None, importance_type=None, |
    |            interaction_constraints=None, learning_rate=None, max_bin=None,  |
    |            max_cat_threshold=None, max_cat_to_onehot=None,                  |
    |            max_delta_step=None, max_depth=None, max_leaves=None,            |
    |            min_child_weight=None, missing=nan, monotone_constraints=None,   |
    |            n_estimators=100, n_jobs=None, num_parallel_tree=None,           |
    |            predictor=None, random_state=None, ...)                          |
    
    ```
    '''
    st.divider()
    '''

    ## Previs√£o

    Ap√≥s o ajuste dos dados, iremos realizar a previs√£o do fechamento do Ibovespa utilizando o modelo que criamos.
    Utilizaremos a fun√ß√£o 'predict' para a previs√£o dos dados.
    ```python
    # Criando e mostrando a previs√£o nos dados de teste
    previsoes = modelo.predict(teste[caracteristicas])
    print('Previs√µes do modelo:')
    print(previsoes)
    ```
    ```
    Previs√µes do modelo:
    [101723.625  99988.08  101242.07  102306.07  100162.05   99860.3
    100003.68  101212.35   99553.875  99227.74   99597.98  100655.06
    100655.06   99391.75   99090.125  96282.25   97211.03   96396.99
    97164.875  96320.805  95931.52   94704.586  95143.375  94796.336
    94435.83   95248.26   96616.125  95628.12   96905.66   98047.18
    98579.79   99160.62   99147.95   99173.93   99241.91   99760.98
    100809.01  101833.55  101419.4   101454.92  101185.57   95993.21
    94211.61   93897.37   95401.7    97421.086 100054.984 100759.914
    102089.37  104115.61  105074.734 102198.45  104267.44  105048.1
    106887.33  106963.914 106414.35  106297.53  107070.07  108213.17
    111577.58  111736.6   111792.47  110379.016 111262.78  111814.625
    111518.39  113224.95  114118.43  114273.195 112681.02  113579.89
    115199.22  116040.56  116099.04  116099.82  119113.28  119247.695
    115439.47  117023.43  117231.625 119247.695 118407.3   118407.3
    118322.836 118110.74  118426.15  118426.15  118469.28  118407.3
    118407.3   118376.945 118407.3   118407.3   118407.3   118407.3
    118407.3   118407.3   116744.625 118521.41  115075.02  118918.5
    116835.55  116217.1   119266.55  119247.695 118407.3   118407.3
    118407.3   118407.3   118407.3   119086.88  118407.3   118407.3
    118335.125 118376.945 113315.69  112869.195 115358.1   112862.305
    110065.58  111281.44  107258.14  107449.805 111984.055 112843.414
    111547.08  111193.82  110223.86  113579.89  114218.875 114458.12
    114218.875 115184.54  114402.98  115373.07  114706.17  115278.805
    114118.43  112091.92  114576.41  115174.29  116143.78  116358.836
    ...
    118407.3   117368.91  118374.266 117214.14  117264.33  119484.984
    118376.945 118513.766 118407.3   118335.125 118407.3   118376.945
    118376.945 118376.945 118433.76  118459.54  118407.3   118376.945
    118511.78  119266.55  119132.13  117451.43  116468.82 ]
    ```

    Em seguida, vamos verificar a acur√°cia do nosso modelo.
    ```python
    # Mostrando a acur√°cia do modelo
    acuracia = modelo.score(teste[caracteristicas], teste[target])
    print('Acur√°cia:')
    print(acuracia)
    ```
    ```
    Acur√°cia:
    0.8809057960319034
    ```
    Com um score de 0,8809057960319034 o modelo tem aproximadamente 88% de acur√°cia para prever as pr√≥ximas observa√ß√µes de fechamento do mercado.
    '''
    st.divider()
    '''
    Vamos ent√£o, plotar o gr√°fico das previs√µes, dos valores de treino e de teste para um melhor entendimento do nosso resultado.
    ```python
    # Plotando as previs√µes e o pre√ßo no fechamento
    plt.figure(figsize=(10,6))
    plt.plot(treino['√öltimo'], color='green', label='Treino')
    plt.plot(teste['√öltimo'], color = 'blue', label='Teste')
    plt.plot(teste[target].index, previsoes, color = 'orange',label='Previs√£o')
    plt.title('Previs√£o do modelo')
    plt.xlabel('Data')
    plt.ylabel('Pre√ßo no fechamento')
    plt.legend()
    plt.grid()
    plt.show()
    '''
    graf_6 = load_img('Assets/Graficos/previsao_target.jpg')
    st.image(graf_6)
    st.divider()
    '''

    ## Conclus√£o:

    Ap√≥s organizar, modificar e ajustar os dados atrav√©s do modelo de previs√£o Extreme Gradient Boosting Regressor, fomos capazes de prever os dados de teste com uma acur√°cia adequada (acima de 70%).
    
    Provavelmente, o modelo em quest√£o seria capaz de prever alguma das pr√≥ximas observa√ß√µes mantendo uma boa precis√£o em rela√ß√£o aos dados futuros.
    '''
with tab5:
    '''

    ## Refer√™ncias

    1. DHADUK, Hardikkumar. Stock market forecasting using Time Series analysis With ARIMA model. Analytics Vidhya, 2021. Dispon√≠vel em: https://www.analyticsvidhya.com/blog/2021/07/stock-market-forecasting-using-time-series-analysis-with-arima-model/. Acesso em: 15, agosto de 2023.

    2. ORDORICA, David. Forecasting Time Series with Auto-Arima. All Data Science, 2021. Dispon√≠vel em: https://www.alldatascience.com/time-series/forecasting-time-series-with-auto-arima/. Acessado em: 15, agosto de 2023.

    3. SMITH, Taylor G. Forecasting the stock market with pmdarima. alkaline-ml, 2019. Dispon√≠vel em: https://alkaline-ml.com/2019-12-18-pmdarima-1-5-2/. Acessado em: 15, agosto de 2023.

    4. √çndice Bovespa (Ibovespa B3). B3, 2023. Dispon√≠vel em: https://www.b3.com.br/pt_br/market-data-e-indices/indices/indices-amplos/ibovespa.htm. Acessado em: 15, agosto de 2023.

    5. Dados Hist√≥ricos - Ibovespa. Investing.com, 2023. Dispon√≠vel em: https://br.investing.com/indices/bovespa-historical-data. Acessado em: 15, agosto de 2023.

    6. Random forest. In: WIKIP√âDIA: a enciclop√©dia livre. [S√£o Francisco, CA: Funda√ß√£o Wikimedia], 2023. Dispon√≠vel em: https://en.wikipedia.org/wiki/Random_forest. Acessado em: 15, agosto de 2023.

    7. Sobreajuste. In: WIKIP√âDIA: a enciclop√©dia livre. [S√£o Francisco, CA: Funda√ß√£o Wikimedia], 2023. Dispon√≠vel em: https://pt.wikipedia.org/wiki/Sobreajuste. Acessado em: 15, agosto de 2023.

    8. PARUCHURI, Vik. Predict The Stock Market With Machine Learning And Python. YouTube, 2022. Dispon√≠vel em: https://www.youtube.com/watch?v=1O_BenficgE. Acessado em: 15, agosto de 2023.

    9. BROWNLEE, Jason. XGBoost for Regression, 2021. Dispon√≠vel em: https://machinelearningmastery.com/xgboost-for-regression/. Acessado em: 15, agosto de 2023.
    '''

